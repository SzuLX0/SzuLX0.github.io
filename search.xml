<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java 垃圾回收机制</title>
      <link href="/2019/05/29/Java-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/05/29/Java-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="一-垃圾回收基础"><a href="#一-垃圾回收基础" class="headerlink" title="一 垃圾回收基础"></a>一 垃圾回收基础</h4><p>​    垃圾回收，顾名思义，便是将已经分配出去的，但却不再使用的内存回收回来，以便重新分配使用。<br>​    As we know， Java与C++相比对于开发人员来说一个很重要的特性就是不再需要自己手动管理内存，只需交给垃圾回收器让其自动回收即可。那么该怎么实现自动垃圾回收呢？需要解决以下问题：</p><blockquote><ol><li>怎么判断某一部分是垃圾</li><li>在什么时候回收</li><li>怎么回收这些垃圾</li></ol></blockquote><p>​    接下来将一一解决以下问题。</p><ol><li><p><strong>怎么判断某一部分是垃圾</strong></p><ol><li><p>1 <strong>引用计数法</strong></p><p>​    <strong>具体做法:</strong> 为每个对象分配一个计数器，用来统计该对象被引用的次数，每当有一个引用指向它，则计数器+1，反之-1；当该对象计数器为0，则回收该对象。</p><p>​    <strong>存在的问题：</strong> 无法<strong>处理循环引用对象</strong>。什么是循环引用对象？比如a、b两个对象互相引用，但是除了他们之外没有其他引用指向a、b，此时实际上他们已经死了，但计数器会认为他们还活着，因此会造成a、b所在的内存空间无法回收，导致内存泄漏。</p></li></ol></li></ol><pre><code>2. 2 **可达性分析算法（JVM中采用）**   ​    **具体做法：** 将一系列**GC ROOTS**作为初始的存活对象集合，从该集合出发，找到所有该集合引用的对象加入该集合，最后未探索到的对象便是死亡的，可以回收。那么什么是GC ROOTS呢?**简单理解为堆外对堆内的引用**，比如局部变量，它可能会引用一个对象，从而使该对象可达。**常见的几种GC ROOTS有：**   &gt; **Java方法中的局部变量**   &gt;   &gt; **已加载类的静态变量**   &gt;   &gt; **JNI handles**（*Java 本机接口（Java Native Interface，*JNI*）是一个标准的Java API*）   &gt;   &gt; **已启动未停止的Java线程**    {% asset_img 可达性分析.png JVM  可达性分析%}   ![可达性分析](E:\bear2\source\_posts\Java-垃圾回收机制\可达性分析.png)   ​                                *（图片来自极客时间）*</code></pre><ol start="2"><li><p><strong>在什么时候回收</strong></p><p>​    在多线程环境下进行回收可能存在很多问题，比如若垃圾回收与其他线程同时进行，可能有线程会更新引用，比如<strong>将引用设置为NULL，或者将引用设置为未被访问的对象</strong>，对于第一种情况危害不大，只是会导致部分垃圾没有及时回收；而第二种有可能导致JVM崩溃，<strong>因为未被访问的对象被标记了要被清除，在标记完之后其他线程对它进行引用，若在引用的时候该对象被清除了则会导致引用了一个空对象，从而使JVM奔溃</strong>。如下图所示：</p><p><img src="E:\bear2\source\_posts\Java-垃圾回收机制\多线程垃圾回收出错的情况.png" alt="多线程垃圾回收出错的情况"></p><p>​    </p><p>​    为了避免上述情况，Java中采用了一种<strong>Stop-the-world</strong>的方法，当进行垃圾回收时，JVM会等待其他线程进入<strong>安全点（safepoint）</strong>，安全点是一个稳定的执行状态，在这个状态下JVM的堆栈不会发生改变，因此JVM可以安全的进行垃圾回收。</p></li></ol><ol start="3"><li><p><strong>怎么回收</strong></p><ol><li>1 <strong>标记清除</strong>，将死亡对象所在空间设置为空闲，记录在一个空闲列表中以供使用。<strong>缺点：造成内存碎片；降低分配效率</strong></li><li>2 <strong>压缩</strong>：将存活的对象聚集在内存的起始位置，留下连续的内存空间。<strong>缺点：压缩算法带来的性能损耗</strong></li><li>3  <strong>复制：</strong> 将内存分为两等份，分别用<strong>from</strong>和<strong>to</strong>指针来维护，当发生垃圾回收时，将from内存活的对象复制到to中，然后交换from和to两个指针的内容。这样可以解决内存碎片化的问题。<strong>缺点：堆空间使用效率低下</strong></li></ol></li></ol><p>   <strong>Java中采用多种方式结合的回收方法</strong></p><h4 id="二-Java中的垃圾回收"><a href="#二-Java中的垃圾回收" class="headerlink" title="二 Java中的垃圾回收"></a>二 Java中的垃圾回收</h4><p>​    <strong>二八定律</strong>：在任何一组东西中，最重要的只占其中一小部分，约20%，其余80%尽管是多数，却是次要的，因此又称二八定律。二八定律在Java的对象中同样适用，<strong>大部分的对象只能存活一小段时间</strong>，<strong>JVM的分代回收就是基于这个定律，JVM将堆划分成新生代和老年代</strong></p><p><strong>JVM的堆划分如下图所示：（图片来自极客时间）</strong></p><img src="/2019/05/29/Java-垃圾回收机制/JVM的堆划分.png" title="JVM堆空间的划分"><p><img src="E:\bear2\source\_posts\Java-垃圾回收机制\JVM的堆划分.png" alt="JVM的堆划分"></p><p><strong>MINOR  GC</strong>：<strong>标记-复制算法</strong></p><p>​    当新生代<strong>Eden</strong>区满，JVM进行一次<strong>minor gc</strong>，具体操作如下：</p><pre><code>1. 将Survivors老存活对象晋升到老年代2. 将Eden和from中存活的对象复制到to中3. 将from和to互换4. JVM会记录Survivors中对象被复制的次数，当次数达到一定值会被晋升到老年代</code></pre><p><strong>FULL GC</strong>：触发条件：若当新生代要晋升时发现老年代空间不够</p><p><strong>卡表</strong>：存在目的主要是<strong>老年代可能引用新生代的对象</strong>，如果引用的话在标记存活对象时需要扫描全堆，，这样的话就导致了全堆扫描。卡表就是用来解决这个问题。（不想写了引用以下别人的..)</p><blockquote><p>卡表的具体策略是<strong>将老年代的空间分成大小为 512B的若干张卡，并且维护一个卡表，卡表本省是字节数组，数组中的每个元素对应着一张卡，其实就是一个标识位，这个标识位代表对应的卡是否可能存有指向新生代对象的引用</strong>，如果可能存在，那么我们认为这张卡是脏的，即<strong>脏卡</strong>。如上图所示，卡表3被标记为脏。</p><p>在进行Minor GC的时候，我们便可以不用扫描整个老年代，而是在卡表中寻找脏卡，并将脏卡中的老年代指向新生代的引用加入到 Minor GC的GC Roots里，当完成所有脏卡的扫描之后，Java 虚拟机便会将所有脏卡的标识位清零。这样虚拟机以空间换时间，避免了全表扫描</p><p>作者：pjmike_pj</p><p>链接：<a href="https://juejin.im/post/5b8d2a5551882542ba1ddcf8" target="_blank" rel="noopener">https://juejin.im/post/5b8d2a5551882542ba1ddcf8</a></p><p>来源：掘金</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><p>​        </p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go实战--爬取掘金网用户信息</title>
      <link href="/2019/03/21/Go%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E6%8E%98%E9%87%91%E7%BD%91%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/"/>
      <url>/2019/03/21/Go%E5%AE%9E%E6%88%98-%E7%88%AC%E5%8F%96%E6%8E%98%E9%87%91%E7%BD%91%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="Go爬取掘金网用户信息"><a href="#Go爬取掘金网用户信息" class="headerlink" title="Go爬取掘金网用户信息"></a>Go爬取掘金网用户信息</h4><p><em>此项目仅用于学习使用</em></p><p><em>项目地址：<a href="https://github.com/SzuLX0/Go-Spider" target="_blank" rel="noopener">https://github.com/SzuLX0/Go-Spider</a></em></p><h5 id="一-掘金网站分析"><a href="#一-掘金网站分析" class="headerlink" title="一 掘金网站分析"></a>一 掘金网站分析</h5><h6 id="1-数据来源"><a href="#1-数据来源" class="headerlink" title="1. 数据来源"></a>1. 数据来源</h6><p><strong>方案一</strong>：</p><p>(a) 从个人信息页提取：遍历每一个用户信息页，从HTML中提取出用户的信息</p><img src="/2019/03/21/Go实战-爬取掘金网用户信息/个人信息.png" title="个人信息"><img src="/2019/03/21/Go实战-爬取掘金网用户信息/个人信息HTML.png" title="个人信息"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用正则表达式可以提取到网页的信息，如下：</span></span><br><span class="line"><span class="keyword">var</span> nameRe = regexp.MustCompile(<span class="string">`&lt;meta data-vue-meta="true" data-vmid="keywords" name="keywords" content="([^"]+)"/&gt;`</span>)</span><br><span class="line">match := nameRe.FindSubmatch(contents)</span><br></pre></td></tr></table></figure><p>(b) 进入个人信息页的途径主要有以下几种：</p><ul><li>从首页文章列表进入</li><li>从话题界面进入</li><li>从标签下文章列表进入</li></ul><p>(c)考虑到数据量及对数据处理上，选择在每个标签界面下进入用户个人信息界面；同时标签下有三种排序，因为目的是为了找到优质用户，所有选择“最热”</p><img src="/2019/03/21/Go实战-爬取掘金网用户信息/所有标签.png" title="所有标签"><p><strong>方案二</strong>：</p><p>（a）在对网站进一步分析时发现，掘金没用采用分页，而是通过<strong>Ajax/Websocket</strong>等技术实现下滑界面自动加载内容。如下图，在查看Network信息时可以发现，<strong>每一次下滑页面浏览器会自动发送一个Get请求获取标签信息，根据Request Header 来判断请求是否合法</strong></p><img src="/2019/03/21/Go实战-爬取掘金网用户信息/获取全部标签.png" title="获取全部标签"><p>返回结果如下，是一个<strong>JSON</strong>类型的数据，因此我们只要<strong>伪造请求头，向这个URL发送GET请求就可以获取所有的tag相关的信息</strong></p><img src="/2019/03/21/Go实战-爬取掘金网用户信息/标签api.png" title="标签api"><p>同理我们再查看标签页面：<strong>它同样是向一个接口发送请求获取数据</strong>，我们查看这个返回的数据，跟预想的一样，有这个界面所需的所有信息。<strong>同时，我们在里面发现了一个”USER”，将其展开发现就是个人信息页所包含的信息。也就是说我们无需再去请求每个个人信息页的内容，直接可以通过这个api获取到个人信息</strong></p><img src="/2019/03/21/Go实战-爬取掘金网用户信息/标签内容.png" title="标签内容"><img src="/2019/03/21/Go实战-爬取掘金网用户信息/USER.png" title="USER"><h5 id="二-爬虫架构设计"><a href="#二-爬虫架构设计" class="headerlink" title="二 爬虫架构设计"></a>二 爬虫架构设计</h5><p>​    经过分析，当然是选择方案二。无需再写一大堆正则表达式，且无需再去访问个人信息页，只需解析返回的JSON数据，提高效率。<strong>方案二的过程如下：</strong></p><img src="/2019/03/21/Go实战-爬取掘金网用户信息/获取数据过程.png" title="获取数据过程"><p>​    <strong>根据该过程，设计出整个爬虫的项目架构如下：</strong></p><img src="/2019/03/21/Go实战-爬取掘金网用户信息/爬虫架构.png" title="爬虫架构"><p>​    项目结构如下：</p><img src="/2019/03/21/Go实战-爬取掘金网用户信息/项目架构.png" title="项目架构"><h5 id="三-爬虫效率分析及优化"><a href="#三-爬虫效率分析及优化" class="headerlink" title="三 爬虫效率分析及优化"></a>三 爬虫效率分析及优化</h5><ol><li><p>由于没用采用并发，每次只能处理一个Request，网络利用率不高，之后可以通过采用并发，一次处理多个Request来改进</p></li><li><p>最初版本的爬虫效率不高，经过分析发现，在写入结果时，代码如下所示，对<strong>每一个用户</strong>进行一次WriteToFile操作，里面会进行一次<strong>文件的打开与保存操作</strong>，这样就导致过多的文件打开关闭操作，所以造成爬虫整体的效率太低。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, item:= <span class="keyword">range</span> parserResult.Items&#123;</span><br><span class="line"><span class="keyword">if</span> i, ok := item.(model.User);ok&#123;</span><br><span class="line">WriteToFile(i)</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进：<strong>将每一次Request处理后的结果一次性写入文件</strong>，效率明显提升。</p></li></ol><h5 id="四-总结"><a href="#四-总结" class="headerlink" title="四 总结"></a>四 总结</h5><ol><li>在这个项目开始的时候没有对网站进行仔细的分析，导致在方案一上花费了过多的时间才发现有接口可以直接去获取数据。</li><li><strong>IO操作</strong>耗时较多，在进行写入文件操作时要尽量减少过多不必要的操作。</li></ol><p><em>更多项目实现上的遇到的一些问题记录在 另一篇文章：Go爬虫学习笔记</em></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go爬虫学习笔记</title>
      <link href="/2019/03/17/Go%E7%88%AC%E8%99%AB%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/17/Go%E7%88%AC%E8%99%AB%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="爬坑之旅"><a href="#爬坑之旅" class="headerlink" title="爬坑之旅"></a>爬坑之旅</h3><h4 id="一-提取网页数据"><a href="#一-提取网页数据" class="headerlink" title="一  提取网页数据"></a>一  提取网页数据</h4><p>​    <strong>问题描述</strong>：在写正则表达式提取网页上的信息时，轻车熟路，<strong>打开网页-右键检查-一键复制-改写成正则表达式</strong>，然而就是拿不到数据。。。向下面那样，想获取红色方框内的标题：</p><img src="/2019/03/17/Go爬虫踩坑笔记/问题描述一.png" title="问题描述一"><p>​    正则表达式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`&lt;div data-v-3fabcb68 class="title"&gt;([^&lt;]+)&lt;/div&gt;`</span></span><br></pre></td></tr></table></figure><p>​    然而始终拿不到数据。。。</p><p>​    <strong>分析</strong>：于是将这句话单独拉出来测试一下正则表达式，写如下代码测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">`&lt;div data-v-3fabcb68 class="title"&gt;Linux&lt;/div&gt;`</span></span><br><span class="line">re, err := regexp.Compile(<span class="string">`&lt;div data-v-3fabcb68 class="title"&gt;([^&lt;]+)&lt;/div&gt;`</span>)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">result := re.FindStringSubmatch(str)</span><br><span class="line">fmt.Println(result[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">---------</span><br><span class="line">Linux</span><br></pre></td></tr></table></figure><p>​    发现结果是对的，这就很奇怪了，为什么在这里可以获取，而在整个html文件里却什么也拿不到。。于是又在网页上翻来覆去，各种尝试折腾了半天，最后无意中将获取的html代码输出一看</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">data-v-3fabcb68</span> &gt;</span>Linux<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <strong>data-v 和 class 的顺序颠倒了….</strong></p><p>​    <strong>解决</strong>：根据获取到的HTML结构重新改下正则表达式即可</p><p>​    <strong>总结</strong>：在提取网页数据的时候不能用<strong>右键-检查</strong>来定位，JavaScript或者浏览器渲染什么的可能会改变网页结构，正则    表达式根据<strong>网页源代码</strong>来写</p><h4 id="二-JSON数据解析"><a href="#二-JSON数据解析" class="headerlink" title="二 JSON数据解析"></a>二 JSON数据解析</h4><p>​    <strong>问题描述</strong>：还是在写爬虫的时候，一个网页下滑自动加载，经过一系列分析找)到了它请求数据的地址如下：</p><p>​    <img src="/2019/03/17/Go爬虫踩坑笔记/问题描述二.png" title="问题描述二"></p><p>​        于是开始设置<strong>request header</strong>，发送<strong>Get</strong>请求去获取数据，发现它最后返回的是JSON格式的数据。那就好办了，于是看了几个提取JSON数据的例子，但是在写的过程中发现怎么也提取不到数据。。。于是把一个例子和我写的放在一起对比，这里放的是简化版：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> tag <span class="keyword">struct</span> &#123;  <span class="comment">//我写的简化版</span></span><br><span class="line">id <span class="keyword">string</span></span><br><span class="line">title <span class="keyword">string</span></span><br><span class="line">createdAt <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123; <span class="comment">//网上找的示例</span></span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Order <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ani := <span class="string">`&#123;"Name": "Platypus", "Order": "Monotremata"&#125;`</span></span><br><span class="line"><span class="keyword">var</span> a Animal</span><br><span class="line">_ = json.Unmarshal([]<span class="keyword">byte</span>(ani), &amp;a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">str := <span class="string">`&#123;"id":"55e7d5a360b2d687f60ae13a","title":"TypeScript","createdAt":"2015-09-02T21:07:48Z"&#125;`</span></span><br><span class="line"><span class="keyword">var</span> t tag</span><br><span class="line">_ = json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;t)</span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">&#123;Platypus Monotremata&#125;</span><br><span class="line">&#123;  &#125;</span><br></pre></td></tr></table></figure><p>​    看着差不多的结构然而我的始终拿不到数据…当时key有十几项还带着嵌套，于是我艰难的一个个比对每一个key是不是打错了..然后又开始怀疑是不是某一项存在什么关键字被转义了，于是开始一项一项删除来排除测试，但是都没有成功</p><p><strong>解决：</strong>最后把我的代码简化到和示例基本上完全相同的结构，直到我终于开始尝试把<strong>字段首字母改成大写</strong>……..</p><p><strong>分析</strong>：其实从<strong>Unmarshal</strong>的调用方式也应该早点发现，<strong>它只返回一个error，所以结构体传进去当然是直接更改结构    体属性的值，如果结构体属性采用小写，那么json包无法访问到，自然也无法更改了</strong>（不过它的err居然还是等于nil    的….)</p><p><strong>总结：</strong>在之后构建结构体解析JSON数据时，结构体属性首字母要大写，不过为了与数据的key统一，可以采用<strong>`json:””`</strong>来命名；之后学习新的库一定要仔细看文档，避免这种不必要的坑……</p><p>Ps: 网上一个自动将JSON转成Go结构的小工具：<a href="https://mholt.github.io/json-to-go/" target="_blank" rel="noopener">https://mholt.github.io/json-to-go/</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> tag <span class="keyword">struct</span> &#123;  <span class="comment">//更改后的代码</span></span><br><span class="line">    Id <span class="keyword">string</span> <span class="string">`json:"id"`</span></span><br><span class="line">    Title <span class="keyword">string</span> <span class="string">`json:"title"`</span></span><br><span class="line">    CreatedAt <span class="keyword">string</span> <span class="string">`json:"createdAt"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-利用匿名函数传递参数"><a href="#三-利用匿名函数传递参数" class="headerlink" title="三 利用匿名函数传递参数"></a>三 利用匿名函数传递参数</h4><p><strong>问题描述</strong>：在写爬虫时，定义了一个结构体如下，在后面实现一个ParserFunc函数的时候，又必须得用到一个tagId的参数，于是就在纠结该怎么将tagId给传到那个函数中去</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123;</span><br><span class="line">Url <span class="keyword">string</span></span><br><span class="line">ParserFunc <span class="function"><span class="keyword">func</span><span class="params">([]<span class="keyword">byte</span>)</span> <span class="params">(ParserResult, error)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>解决</strong>：<strong>利用匿名函数包装，可以看到下面利用一个参数为([]byte)的匿名函数作为ParserFunc，里面调用了一个需要用到tagId的函数。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Request&#123;</span><br><span class="line">Url:url,</span><br><span class="line"><span class="comment">//通过构造一个匿名函数，将tagId传给ParseTagInit</span></span><br><span class="line">ParserFunc: <span class="function"><span class="keyword">func</span><span class="params">(c []<span class="keyword">byte</span>)</span> <span class="params">(result engine.ParserResult, e error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> ParseTagInit(c, tagId)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四-HTML编码"><a href="#四-HTML编码" class="headerlink" title="四 HTML编码"></a>四 HTML编码</h4><p><strong>问题描述</strong>：在获取网页内容时，经常会遇到HTML输出乱码，是因为编码不一致导致。</p><p><strong>解决：</strong></p><ol><li><p><strong>查看HTML编码手动转码，但这种方法具有局限性，且有时HTML上给的编码不一定正确</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用性不好，如果不是GBK就不行</span></span><br><span class="line">utf8Reader := transform.NewReader(resp.Body, simplifiedchinese.GBK.NewDecoder())</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>自动判断编码进行转换，需要安装 golang.org/x/net/html</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">buf := bufio.NewReader(resp.Body)</span><br><span class="line">e := DetermineEncoding(buf)</span><br><span class="line">utf8Reader := transform.NewReader(buf, e.NewDecoder())</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用前1024个字节判断HTML的编码类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DetermineEncoding</span><span class="params">(r *bufio.Reader)</span> <span class="title">encoding</span>.<span class="title">Encoding</span></span>&#123;</span><br><span class="line"><span class="comment">//使用peek防止丢失前1024个bytes</span></span><br><span class="line">bytes, err := r.Peek(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="comment">//若字数不够1024，返回一个默认的encoding--utf8</span></span><br><span class="line"><span class="comment">//log.Fatal("fetcher error: %v", err)</span></span><br><span class="line"><span class="keyword">return</span> unicode.UTF8</span><br><span class="line">&#125;</span><br><span class="line">e, _, _ :=charset.DetermineEncoding(bytes, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符编码：Unicode与UTF-8</title>
      <link href="/2019/03/14/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%9AUnicode%E4%B8%8EUTF-8/"/>
      <url>/2019/03/14/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%9AUnicode%E4%B8%8EUTF-8/</url>
      
        <content type="html"><![CDATA[<h5 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h5><h6 id="1-Unicode与UTF-8的诞生"><a href="#1-Unicode与UTF-8的诞生" class="headerlink" title="1. Unicode与UTF-8的诞生"></a>1. Unicode与UTF-8的诞生</h6><p>​    a. 简单介绍下字符编码：在计算机中所有内容都是以<strong>二进制</strong>存储，那么该如何表示字符呢？其实就是制作一个<strong>“映射表”</strong>，例如使用二进制（01000001）表示大写字母A，将不同的字母、符号分别用一个值表示。计算机在读到一串字节流的时候，去这张表中查找，再将它转换成对应的字母、符号即可。而因为英文字母加符号数量并不多，使用8个二进制位就完全足以表示，<strong>ASCII码</strong>就是这样。</p><p>​    b. 后来计算机不断的发展，除了美国，其他国家的人也希望用计算机。英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。ASCII显然无法满足其他语言的需求。于是不同国家就开始使用不同的编码方式，这样就导致不同国家的人“交流”十分困难，因为编码方式不同而经常导致乱码</p><p>​    c. 为了解决这一问题，人们将<strong>将所有的语言符号放到一个集合中，每一个符号用唯一的一个编码标识</strong>，这就是<strong>Unicode</strong>。所以，<strong>Unicode本质上是一个字符集合</strong>。</p><p>​    d. <strong>Unicode存在的问题</strong>：<br>​        （1）它只规定了每个字符的一个<strong>唯一标识– 一个二进制代码</strong>，但是没有规定这个标识该怎么存储。比如说靠前    面的字符这个标识比较小，只需一个字节即可存储；而靠后面的这个代码较大，需要多个字节存储。若统一规定所有    的字符使用三个或四个字节存储，则会造成巨大的浪费。<br>​        （2） <strong>没有规定一个编码方案</strong>。比如字节流传来三个字节，那么该如何识别？它有可能是三个字符、两个字符、    一个字符，具有多种情况，计算机该怎么识别？</p><p>​    e. <strong>UTF-8的诞生</strong><br>​        （1） 上面说到，Unicode作为一个字符集，存在着<strong>资源浪费</strong>和<strong>字节流识别字符</strong>两个尚未解决的问题，那么就需    要一种编码方式能够解决这样的问题。<strong>UTF-8</strong>就这样诞生了。<br>​        （2）<strong>UTF-8的编码规则</strong>：</p><blockquote><p>1）对于单字节的符号，字节的第一位设为<code>0</code>，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</p><p>2）对于<code>n</code>字节的符号（<code>n &gt; 1</code>），第一个字节的前<code>n</code>位都设为<code>1</code>，第<code>n + 1</code>位设为<code>0</code>，后面字节的前两位一律设为<code>10</code>。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。</p></blockquote><p>​        （3） 从UTF-8的编码规则可以看出：<strong>UTF-8是一种可变长编码，避免了资源浪费的同时也解决了字节流的识    别问题</strong>，因此，目前使用最广的就是UTF-8编码了。</p><p>​    f. 其他Unicode编码方式：常见的有<strong>UCS-2/UTF-16</strong>、<strong>GB18030</strong>等，这里就不再叙述。</p><h6 id="2-编码与解码具体过程"><a href="#2-编码与解码具体过程" class="headerlink" title="2. 编码与解码具体过程"></a>2. 编码与解码具体过程</h6><p>​    a. <strong>编码:将字符转成字节流</strong>，直接用图说明编码的过程</p><img src="/2019/03/14/字符编码：Unicode与UTF-8/编码.png" title="编码"><p>​    </p><p>​    b. <strong>解码：将字节流转换成字符</strong>，下面上图：</p><img src="/2019/03/14/字符编码：Unicode与UTF-8/解码.png" title="解码"><p>​    </p><p>​    c. <strong>不同编码之间的转换：</strong></p><img src="/2019/03/14/字符编码：Unicode与UTF-8/编码转换.png" title="编码转换"><h6 id="3-参考资料："><a href="#3-参考资料：" class="headerlink" title="3. 参考资料："></a>3. 参考资料：</h6><p>a. <a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a><br>b. <a href="http://www.imkevinyang.com/2010/06/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%8C%E4%BD%A0%E6%89%80%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84.html" target="_blank" rel="noopener">http://www.imkevinyang.com/2010/06/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%8C%E4%BD%A0%E6%89%80%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 字符编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go--日常踩坑</title>
      <link href="/2019/03/13/Go%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/13/Go%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="Go–日常被坑"><a href="#Go–日常被坑" class="headerlink" title="Go–日常被坑"></a>Go–日常被坑</h4><h5 id="1-2019-3-13-关于Go中类型转换的问题"><a href="#1-2019-3-13-关于Go中类型转换的问题" class="headerlink" title="1. 2019/3/13    关于Go中类型转换的问题"></a>1. 2019/3/13    关于Go中类型转换的问题</h5><ul><li><p>问题描述：在进行类型转换的时候，例如int-&gt;string，误以为跟Python类似，直接使用string(12)进行强制类型转换，导致最后结果不正确。</p></li><li><p>错误原因：直接使用string(int类型)，go中会将int类型的数字当成utf8编码，而不是对应的”12”</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">97</span></span><br><span class="line">b := <span class="keyword">string</span>(<span class="number">97</span>)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(b)</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">输出结果为：<span class="number">97</span>,<span class="string">"a"</span></span><br></pre></td></tr></table></figure></li><li><p>解决方法:<strong>将一个整数转为字符串，一种方法是用fmt.Sprintf返回一个格式化的字符串；另一个方法是用<br>strconv.Itoa  (int to ascii, 同理字符串转数字为strconv.Atoi, ascii to int)：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="number">123</span></span><br><span class="line">y := fmt.Sprintf(<span class="string">"%d"</span>, x)</span><br><span class="line">fmt.Println(y, strconv.Itoa(x)) <span class="comment">// "123 123"</span></span><br></pre></td></tr></table></figure></li><li><p>拓展：对于字符编码及类型转换问题不太熟悉，另开一篇文章总结。</p></li></ul><h5 id="2-2019-3-15-Go中的文件IO"><a href="#2-2019-3-15-Go中的文件IO" class="headerlink" title="2. 2019/3/15    Go中的文件IO"></a>2. 2019/3/15    Go中的文件IO</h5><ul><li>问题描述：Go中的文件读取分散在io、ioutil等多个包内，操作太过分散使用不便</li><li>解决方法：总结归纳所有的文件操作。在网上找到一篇已经归纳的十分详细的文章，故不再重写，贴上链接自行研究。<ul><li>链接：<a href="https://colobu.com/2016/10/12/go-file-operations/" target="_blank" rel="noopener">https://colobu.com/2016/10/12/go-file-operations/</a></li></ul></li><li>总结：在寻找资料的时候发现网上一些有效的博客质量很高很实用，还有许多文章来不及看。决定另开一篇文章归纳看到的一些优秀博客以方便以后查看。</li></ul><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络总结--思维导图</title>
      <link href="/2019/03/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h5 id="计算机网络总结–思维导图"><a href="#计算机网络总结–思维导图" class="headerlink" title="计算机网络总结–思维导图"></a>计算机网络总结–思维导图</h5><h6 id="一-物理层"><a href="#一-物理层" class="headerlink" title="一  物理层"></a>一  物理层</h6><p>​    物理层主要涉及硬件，相关知识点较少，主要包括通信方式及带通调制。</p><img src="/2019/03/11/计算机网络总结/物理层.png" title="物理层"><h6 id="二-数据链路层"><a href="#二-数据链路层" class="headerlink" title="二 数据链路层"></a>二 数据链路层</h6><p>​    两台主机间的数据传输，总是一段一段在数据链路上传送的，这就需要使用专门的链路层协议。在两个相邻节点间的链路上传送帧，每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）</p><img src="/2019/03/11/计算机网络总结/数据链路层.png" title="数据链路层"><h6 id="三-网络层"><a href="#三-网络层" class="headerlink" title="三 网络层"></a>三 网络层</h6><p>​    网络层为分组交换网上不同主机提供通信服务。网络层将运输层产生的报文段或用户数据报封装成分组和包进行传送。</p><img src="/2019/03/11/计算机网络总结/网络层1.png" title="网络层1"><img src="/2019/03/11/计算机网络总结/网络层2.png" title="网络层"><h6 id="四-传输层"><a href="#四-传输层" class="headerlink" title="四 传输层"></a>四 传输层</h6><p>​    运输层的任务是负责为两个主机中进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层 报文。</p><img src="/2019/03/11/计算机网络总结/传输层.png" title="传输层"><h6 id="五-应用层"><a href="#五-应用层" class="headerlink" title="五 应用层"></a>五 应用层</h6><p>​    应用层的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程间通信和交互的规则。</p><img src="/2019/03/11/计算机网络总结/应用层.png" title="应用层"><h6 id="六-完整的五层结构"><a href="#六-完整的五层结构" class="headerlink" title="六 完整的五层结构"></a>六 完整的五层结构</h6><img src="/2019/03/11/计算机网络总结/计算机网络.png" title="五层结构">]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go实现常见的排序</title>
      <link href="/2019/03/10/Go%E5%AE%9E%E7%8E%B0%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E5%8F%8A%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90/"/>
      <url>/2019/03/10/Go%E5%AE%9E%E7%8E%B0%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E5%8F%8A%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>先留个坑</p><p>部分实现代码：<a href="https://github.com/SzuLX0/Go-Sort" target="_blank" rel="noopener">https://github.com/SzuLX0/Go-Sort</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一条咸鱼的日常</title>
      <link href="/2019/03/10/%E4%B8%80%E6%9D%A1%E5%92%B8%E9%B1%BC%E7%9A%84%E6%97%A5%E5%B8%B8/"/>
      <url>/2019/03/10/%E4%B8%80%E6%9D%A1%E5%92%B8%E9%B1%BC%E7%9A%84%E6%97%A5%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h3 id="一条咸鱼的日常"><a href="#一条咸鱼的日常" class="headerlink" title="一条咸鱼的日常"></a>一条咸鱼的日常</h3><h6 id="一"><a href="#一" class="headerlink" title="一"></a>一</h6><p>​    今天参加了篮球世界杯32强抽签仪式志愿者的培训，最大收获就是学会了一些急救知识。心肺复苏、除颤器的使用什么的，感觉人真是太脆弱了，一不小心就凉凉。下周末开始，希望能够借此机会好好锻炼一下自己的口语，想想上次去泰国自己的口语真的是一言难尽…..</p><h6 id="二"><a href="#二" class="headerlink" title="二"></a>二</h6><p>​    新认识了一位朋友，相谈甚欢，可是没聊几天就要分别，甚至因为某些原因而联系方式都没有。离别真是世界上最常见的事情，而告别也真是最令人讨厌的事情。虽嘴上说着江湖再见，而大家心里都明白，更多的是相忘于江湖。即将毕业了，这种分别将越来越多。告别总是难免的，珍惜最后这段时间吧。</p><h6 id="三"><a href="#三" class="headerlink" title="三"></a>三</h6><p>​    第一次自己煮面，和以前老妈在旁边在线指导做菜完全不一样的感受….以前每一步该干什么炒多久完全靠老妈指导，只要按部就班的做，虽不好看，但好歹味道不会差到哪去。而自己做，完全开始懵逼，甚至只是想煮一碗普通的青菜鸡蛋面。该放多少水？煮面要放油吗？青菜什么时候下？鸡蛋…噢我还没打过鸡蛋…，鸡蛋得怎么打才不会一堆蛋壳？<br>​    好吧，话不多说，虽然什么都不会，先下手再说。<em>于是，在一阵手忙脚乱之后，经过不懈的努力，果然把面煮糊了。</em>倒了这锅半焦的面陷入沉思，<strong>反思一下原因：面下多了；面下锅后洗菜时间太长导致没有及时搅拌面，导致最后糊锅里了。</strong>做的好的地方：好歹打鸡蛋成功了，没有想象中的困难。<strong>改进方案：加水减面；提前洗好菜；多搅拌面</strong>。改进结果：<br>面熟了，能吃，味道还过得去。<br>​    其实想想煮面跟自己打代码一样，看慕课什么的跟着老师好像什么都会，编程就是so easy。而慕课一关打开IDE，陷入我是谁我在哪我在干嘛的尴尬局面。果然还是得多练手才行……</p><h6 id="四"><a href="#四" class="headerlink" title="四"></a>四</h6><p>​    最近开始春招，说实话有点焦虑，不会的太多，得抓紧时间准备一下了。可怜我的相机…等忙完这段时间就带你出门看世界…..</p><h6 id="五"><a href="#五" class="headerlink" title="五"></a>五</h6><p>​    前两天和许久未见的朋友聚了一下，放纵了一下自己。果然，好的习惯要21天培养，而堕落只需要24小时…..<br>​    放纵完回来之前好不容易养成的习惯一下就断了，调整回状态又浪费了不少时间。还是尽量得控制住自己。<strong>多读书多拍照，多打代码别去闹~</strong></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go中的“面向对象”</title>
      <link href="/2019/03/05/Go%E4%B8%AD%E7%9A%84%E2%80%9D%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%9C/"/>
      <url>/2019/03/05/Go%E4%B8%AD%E7%9A%84%E2%80%9D%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="Go中的“面向对象”"><a href="#Go中的“面向对象”" class="headerlink" title="Go中的“面向对象”"></a>Go中的“面向对象”</h3><h4 id="一-Go中的“对象”"><a href="#一-Go中的“对象”" class="headerlink" title="一  Go中的“对象”"></a>一  Go中的“对象”</h4><ol><li><p><strong>Struct</strong></p><ul><li><p>a. go语言中没有对象(object)这个关键词。对象（object）仅仅是一个单词，重要的是它所表示的含义。尽管go中没有object这种类型，但是go中的struct有着跟object相同的特性。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类名首字母小写表示Private，大写表示public</span></span><br><span class="line"><span class="keyword">type</span> point <span class="keyword">struct</span>&#123;</span><br><span class="line">    x float</span><br><span class="line">    y float</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>b. struct是一种包含了命名域和方法的类型</p></li><li><p>c. <strong>go中没有构造函数</strong>，可以使用一个工厂函数创建对象返回。如下：</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNode</span><span class="params">(value <span class="keyword">int</span>)</span> *<span class="title">TreeName</span></span>&#123;</span><br><span class="line">    <span class="comment">//工厂函数中新建了一个TreeName对象，并返回该对象的指针</span></span><br><span class="line"><span class="keyword">return</span> &amp;TreeName&#123;value: value&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​     <strong>从这里可以看出与C/C++的差别：在C++中该函数在栈中创建了一个局部变量，在函数返回的时候这个对象会被销毁，后续使用中会出错。而在Go语言中并不会报错，因为编译器会动态决定该结构是创建在栈上还是堆上，若编译器发现返回了该结构的地址给后续使用，则会在创建的时候将它建在堆上，函数结束时不会被销毁。</strong></p></li></ol><ul><li>d. <strong>Go中的nil也可以调用方法。</strong>但Go中的<strong>nil</strong>比其他语言的<strong>null</strong>使用更为复杂，之后再做补充，暂且不叙述。</li></ul><ol start="2"><li><p><strong>方法</strong></p><p>(1) 方法声明和普通的函数声明类似，只是在函数名字前面多了一个参数，将该方法绑定到参数对应的类型上。</p><p>​    <strong>注：方法可以绑定到任何类型上，除了结构体，也可以是简单类型，如数值型、字符串、函数、slice等，但指针类型和接口不行</strong></p><p>​    推测指针和接口不能绑定方法的原因：方法本身就具有指针接收者，指针类型绑定方法会引起混淆；接口只用来定义方法，让实现接口的对象来实现方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给指针类型绑定方法会报错</span></span><br><span class="line"><span class="comment">//Invalid receiver type 'ptr' ('ptr' is a pointer type) less... (Ctrl+F1) </span></span><br><span class="line"><span class="comment">//Inspection info: Reports invalid receiver types.</span></span><br><span class="line"><span class="keyword">type</span> ptr *<span class="keyword">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p ptr)</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//同样给接口类型绑定方法也会报错</span></span><br><span class="line"><span class="keyword">type</span> interFace <span class="keyword">interface</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(in interFace)</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   (2)值接收者与指针接受者的选择</p><p>   ​    a. 当把内置类型（<strong>数值类型、字符串类型、布尔类型</strong>）的值传递给方法或者函数的时候，传递值的副本，选择值传递</p>   <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//strings 里面随便找了一个使用内置类型的函数</span></span><br><span class="line"><span class="comment">//可以看出它对string的副本进行操作，返回一个新的string值的副本</span></span><br><span class="line"><span class="comment">// TrimLeftFunc returns a slice of the string s with all leading</span></span><br><span class="line"><span class="comment">// Unicode code points c satisfying f(c) removed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TrimLeftFunc</span><span class="params">(s <span class="keyword">string</span>, f <span class="keyword">func</span>(<span class="keyword">rune</span>)</span> <span class="title">bool</span>) <span class="title">string</span></span> &#123;</span><br><span class="line">i := indexFunc(s, f, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s[i:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   ​    b.  引用类型（<strong>切片、map、通道、接口、函数</strong>）：引用类型的变量称为标头值（header），是一个指向底层数据结构的指针，使用值传递即可。</p><p>   ​    c. 结构类型：结构内是原始类型：值传递； 结构内是非原始：指针传递</p><p>   ​    d. 其他原则：</p><p>   ​        结构体过大考虑指针</p><p>   ​        一致性： 若有指针接受者，最好都是指针接收者</p><p>   ​    e. 决策应该基于<strong>类型本质</strong>，不应该由该方法是否修改接收到的值来决定（如内置类型，即使修改了一般也使用值        接受者）</p><p>   ​    f. <em>一个例外：需要让类型值符合某个接口的时候，即使类型本质是非原始的，也可以选择使用值接收者声明方        法。（待补充）</em></p><p>   (3) 值接收者与指针接收者的方法调用：</p><p>   ​    a. 实参接收者与形参接收者是同一个类型,都是T或者*T</p><p>   ​    b. 实参接收者是T类型的<strong>变量</strong>而形参接收者是*T，编译器会隐式进行转换为&amp;T</p><p>   ​    c. 实参接收者是<em>T类型的<strong>变量</strong>而形参接收者是T类型，编译器会隐式进行转换为\</em>T</p><p>   ​    d. <strong>Notes:上面b，c强调是变量，如果不是变量则必须要符合a</strong></p>   <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> point <span class="keyword">struct</span>&#123;</span><br><span class="line">    x <span class="keyword">int</span></span><br><span class="line">    y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *point)</span> <span class="title">cal</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"cal"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p point)</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a := point&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">    b := &amp;point&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    <span class="comment">//这四种方式都可以</span></span><br><span class="line">    a.cal()</span><br><span class="line">    a.hello()</span><br><span class="line">    b.cal()</span><br><span class="line">    b.hello()</span><br><span class="line">    <span class="comment">//这个不行，不是变量且实参是point类型，形参是*point</span></span><br><span class="line">    point&#123;<span class="number">1</span>,<span class="number">2</span>&#125;.cal()</span><br><span class="line">    <span class="comment">//可以 不是变量但是同类型</span></span><br><span class="line">    point&#123;<span class="number">1</span>,<span class="number">2</span>&#125;.hello()</span><br><span class="line">    <span class="comment">//同上</span></span><br><span class="line">    <span class="built_in">new</span>(point).cal()</span><br><span class="line">    <span class="comment">//不行，不是变量且实参是*point，形参是point，不同类型</span></span><br><span class="line">    <span class="built_in">new</span>(point).hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>关于自定义类型的几点注意事项：</strong></p><ul><li>type 自定义类型 原始类型<br>   命名类型: int,float,string,bool,自定义的类型<br>   未命名类型：slice, map, 数组</li><li><p>自定义类型与原始类型不能相互计算</p></li><li><p>可以强制类型转换</p></li><li><p>type 可以写进main里面</p></li><li><p>未命名类型可以赋值给相同结构的自定义类型</p></li></ul></li></ol><h4 id="二-Go中的“继承与多态”"><a href="#二-Go中的“继承与多态”" class="headerlink" title="二 Go中的“继承与多态”"></a>二 Go中的“继承与多态”</h4><ol><li><p>Go语言中并没有<strong>继承语法</strong>，对象之间的关系是采用<strong>匿名组合</strong>方式实现的。Go中使用<strong>struct和接口</strong>来实现“<em>伪多态</em>”，之所以称为伪多态是因为它与类似Java的面向对象语言的多态存在一点差异，后面再细说。</p></li><li><p><strong>匿名组合</strong>：</p><ul><li><p>继承规则</p><p>​       a. 在派生类没有改写基类的成员方法时，相应的成员方法被继承。</p><p>​       b. 派生类可以直接调用基类的成员方法，譬如基类有个成员方法为Base.Func()，那么Derived.Func()等同于Derived.Base.Func()</p><p>​       c. 倘若派生类的成员方法名与基类的成员方法名相同，那么基类方法将被覆盖或叫隐藏，譬如基类和派生类都有成员方法Func()，那么Derived.Func()将只能调用派生类的Func()方法，如果要调用基类版本，可以通过Derived.Base.Func()来调用。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> father <span class="keyword">struct</span> &#123;</span><br><span class="line">money <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *father)</span> <span class="title">fa</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"I am father "</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *father)</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"father's work"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> son <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//使用一个father的匿名对象</span></span><br><span class="line">father</span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *son)</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"son's work"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">tom := son&#123;</span><br><span class="line">father&#123;<span class="number">1000</span>&#125;,</span><br><span class="line"><span class="number">12</span>,</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//son中有和father一样的同名的方法，若直接调用son.work()，会覆盖匿名类的work方法</span></span><br><span class="line">tom.work()</span><br><span class="line">    <span class="comment">//son中内置了一个匿名对象，可以通过它访问被覆盖的方法</span></span><br><span class="line">tom.father.work()</span><br><span class="line">    <span class="comment">//也可以使用son直接访问没有被覆盖的方法</span></span><br><span class="line">tom.fa()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">son<span class="string">'s work</span></span><br><span class="line"><span class="string">father'</span>s work</span><br><span class="line">I am father</span><br></pre></td></tr></table></figure></li><li><p><strong>接口</strong></p><p>(1) 接口是一种类型，从接口的定义也可以看出来。</p><pre><code>实现接口也不需要像Java那些使用extends这种关键字，只要类型实现了接口定义的方法就**隐式实现**了接口。如dog类型实现了bark方法，则它实现了animaler接口</code></pre><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> animaler <span class="keyword">interface</span>&#123;</span><br><span class="line">    bark()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;</span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *dog)</span> <span class="title">bark</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"wang wang wang "</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><pre><code>(2) 接口变量的值：</code></pre><p>   ​    a. 将实现接口的类型的值赋给接口：</p><blockquote><p>接口值是一个两个字长度的数据结构，第一个字包含一个指向内部表的指针，这个内部表叫<strong>iTable</strong>，包含所存值的类型信息以及和这个值关联的一组方法（<strong>方法集，后面讲</strong>）。第二个字包含一个指向所存储值的指针。</p></blockquote>   <p>   b. 将实现接口的类型的<strong>指针</strong>赋给接口：类型信息会存储一个<strong>指向保存类型的指针</strong></p>   <p>   （3）获取接口变量的值</p><p>   ​    a. 区分多种类型，可以使用 switch 断言，简单直接，<strong>这种断言方式只能在 switch 语句中使用。</strong></p>   <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> ani.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> dog:</span><br><span class="line">fmt.Println(<span class="string">"dog "</span>)</span><br><span class="line"><span class="keyword">case</span> *dog:</span><br><span class="line">fmt.Println(<span class="string">"*dog "</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   ​    b. go 可以使用 <code>comma, ok</code> 的形式做区分 <code>value, ok := em.(T)</code>：<strong>em 是 interface 类型的变量，T代表要断言的类型，value 是 interface 变量存储的值，ok 是 bool 类型表示是否为该断言的类型 T</strong>。</p>   <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _, ok := ani.(*dog); ok &#123;</span><br><span class="line">    fmt.Println(<span class="string">"is *dog type"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   ​    </p><p>   （4）空接口</p><blockquote><p><code>interface{}</code> 是一个空的 interface 类型，根据前文的定义：一个类型如果实现了一个 interface 的所有方法就说该类型实现了这个 interface，空的 interface 没有方法，所以可以认为所有的类型都实现了 <code>interface{}</code>。如果定义一个函数参数是 <code>interface{}</code> 类型，这个函数应该可以接受任何类型作为它的参数。</p></blockquote><p>   ​    <strong>这里要注意的是，[]interface{} 并不能接受任何类型的slice，因为它不是一个接口，不会自动转换，具体查看：<a href="https://github.com/golang/go/wiki/InterfaceSlice" target="_blank" rel="noopener">https://github.com/golang/go/wiki/InterfaceSlice</a></strong></p><p>   （5) <strong>方法集</strong>–接口的接受规则</p><blockquote><p>Golang方法集 ：每个类型都有与之关联的方法集，这会影响到接口实现规则。</p><p>• 类型 T 方法集包含全部 receiver T 方法。<br>• 类型 <em>T 方法集包含全部 receiver T + </em>T 方法。<br>• 如类型 S 包含匿名字段 T，则 S 和 <em>S 方法集包含 T 方法。<br>• 如类型 S 包含匿名字段 </em>T，则 S 和 <em>S 方法集包含 T + </em>T 方法。<br>• 不管嵌入 T 或 <em>T，</em>S 方法集总是包含 T + *T 方法。</p></blockquote><p>   <strong>具体使用查看：<a href="https://www.kancloud.cn/liupengjie/go/570054" target="_blank" rel="noopener">https://www.kancloud.cn/liupengjie/go/570054</a></strong></p><p>   ​    </p><ol start="4"><li><p>多态与伪多态：为什么称Go中的是伪多态呢？</p><ul><li><p>首先查看多态的定义：</p><blockquote><p>多态（Polymorphism）按字面的意思就是“多种状态”。在<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%AD%E8%A8%80/215742" target="_blank" rel="noopener">面向对象语言</a>中，接口的多种不同的实现方式即为多态。引用Charlie Calverts对多态的描述——多态性是允许你将父对象设置成为一个或更多的他的<a href="https://baike.baidu.com/item/%E5%AD%90%E5%AF%B9%E8%B1%A1/11001276" target="_blank" rel="noopener">子对象</a>相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作（摘自“Delphi4 <a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2646621" target="_blank" rel="noopener">编程技术</a>内幕”）。</p></blockquote></li><li><p>go提供了多态的能力。接口的使用能使得实现了该接口的不同对象都能作为函数的输入参数，甚至作为返回结果，但是它的“子对象”和“父对象”是两个不同的类型，并不能将子对象赋值给父对象，子对象保持着自己的类型。</p></li></ul></li></ol><p>相关资料:</p><pre><code>1. https://sanyuesha.com/2017/07/22/how-to-understand-go-interface/2. https://www.kancloud.cn/liupengjie/go/5700543. https://cloud.tencent.com/developer/article/10677774. 《Go程序设计语言》5. 《Go语言实战》</code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Slice详解</title>
      <link href="/2019/03/04/Slice%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/03/04/Slice%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Slice常见操作及底层原理实现"><a href="#Slice常见操作及底层原理实现" class="headerlink" title="Slice常见操作及底层原理实现"></a>Slice常见操作及底层原理实现</h2><h3 id="一-什么是Slice"><a href="#一-什么是Slice" class="headerlink" title="一 什么是Slice"></a>一 什么是Slice</h3><ol><li>slice（切片）是一种数组结构，相当于是一个动态的数组，可以按需自动增长和缩小。</li><li>那么为什么需要slice呢？<ul><li>在GO语言中，数组是一个值，在进行传参和赋值操作时，都会将数组拷贝一份，当数组较大时耗费较多资源；使用数组的指针会较为麻烦</li><li>slice是引用类型，传参时不需要再用到指针；slice本质上是数组的指针，所以传参时不需要拷贝数组，耗费较小；可以动态改变数组大小，使用更加的方便</li></ul></li></ol><h3 id="二-Slice的常用操作"><a href="#二-Slice的常用操作" class="headerlink" title="二 Slice的常用操作"></a>二 Slice的常用操作</h3><ol><li><p>slice的创建</p><ul><li><p>a. 使用内置的make函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只指定长度，则默认容量和长度相等</span></span><br><span class="line"><span class="comment">//容量的定义在后面解释</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">//指定长度和容量，容量不能小于长度</span></span><br><span class="line">slice = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>b. 使用切片字面量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其长度和容量都是3</span></span><br><span class="line">s1 := []<span class="keyword">string</span>&#123;<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"bear"</span>&#125;</span><br><span class="line"><span class="comment">//使用索引声明切片</span></span><br><span class="line"><span class="comment">//下面创建了一个长度为100的切片</span></span><br><span class="line">s2 := []<span class="keyword">int</span>&#123;<span class="number">99</span>: <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>c. nil和空切片</p><ul><li><p>声明时不做任何初始化就会创建一个nil切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span></span><br><span class="line"><span class="comment">//new 产生的是指针，需要用* </span></span><br><span class="line">slice := *<span class="built_in">new</span>([]<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure></li><li><p>声明空切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用make</span></span><br><span class="line">s1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">//使用切片字面量</span></span><br><span class="line">s2 := []<span class="keyword">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>空切片与nil切片的区别:</p><ul><li><strong>nil切片=nil, 而空切片！=nil，在使用切片进行逻辑运算时尽量不要使用空切片</strong></li><li>空切片指针指向一个特殊的<strong>zerobase</strong>地址，而nil为0</li><li>在JSON序列化有区别：nill切片为{“values”:null}, 而空切片为{“value” []}</li></ul></li></ul></li></ul></li><li><p>增加元素</p><ul><li>使用内置函数append添加元素</li></ul></li><li><p>复制切片</p><ul><li>使用copy</li></ul></li><li><p>删除元素，内置没有提供，下面简单实现一下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteSlice</span><span class="params">(index <span class="keyword">int</span>, s []<span class="keyword">int</span>)</span> []<span class="title">int</span></span>&#123;</span><br><span class="line">s1 := s[:index]</span><br><span class="line">s1 = <span class="built_in">append</span>(s1, s[index+<span class="number">1</span>:]...)</span><br><span class="line"><span class="keyword">return</span> s1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-slice底层实现"><a href="#三-slice底层实现" class="headerlink" title="三 slice底层实现"></a>三 slice底层实现</h3><ol><li><p>切片是基于数组实现的，是数组的抽象，因此底层的内存是连续的，效率较高，效率非常高，还可以通过索引获得数据，可以迭代以及垃圾回收优化的好处。切片对象本身的很小，是因为它是只有3个字段的数据结构：一个是指向底层数组的指针，一个是切片的长度，一个是切片的容量。这3个字段，就是Go语言操作底层数组的元数据。查看其源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> notInHeapSlice <span class="keyword">struct</span> &#123;</span><br><span class="line">array *notInHeap<span class="comment">//底层数组的指针</span></span><br><span class="line"><span class="built_in">len</span>   <span class="keyword">int</span>   <span class="comment">//切片的长度</span></span><br><span class="line"><span class="built_in">cap</span>   <span class="keyword">int</span>   <span class="comment">//切片的容量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/03/04/Slice详解/slice底层结构.png" title="slice底层结构"></li><li><p>关于容量与长度：</p><ul><li><p>a. 长度：slice当前元素个数</p><p>​    容量：底层数组的空间，当容量不足时会开辟新的数组空间，避免频繁开辟内存空间</p></li><li><p>b. 计算：对于底层数组容量是k的切片slice[i,j]来说</p><ul><li>长度：j-i</li><li>容量：k-i</li></ul></li><li><p>c. 数组索引不能超过长度</p></li></ul></li></ol><ol start="3"><li><p><strong>切片增长会改变长度，容量不一定，需要看可用容量，当容量不足时会分配一个新的底层数组，将现有的值复制到新数组再添加新的值。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">t := <span class="built_in">append</span>(s, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"before_arr_s = %p\n"</span>, s)</span><br><span class="line">fmt.Println(t)</span><br><span class="line">fmt.Printf(<span class="string">"before_arr_t = %p\n"</span>, t)</span><br><span class="line"></span><br><span class="line">t = <span class="built_in">append</span>(t, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">fmt.Printf(<span class="string">"after_arr_s = %p\n"</span>, s)</span><br><span class="line">fmt.Println(t)</span><br><span class="line">fmt.Printf(<span class="string">"after_arr_t = %p\n"</span>, t)</span><br><span class="line"></span><br><span class="line">--------------------------</span><br><span class="line">[]</span><br><span class="line">before_arr_s = <span class="number">0xc000078030</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">before_arr_t = <span class="number">0xc000078030</span></span><br><span class="line">[]</span><br><span class="line">after_arr_s = <span class="number">0xc000078030</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"><span class="comment">//当第二次添加元素时超过了容量限制，于是重新开辟了数组，查看地址发现的确发生了改变</span></span><br><span class="line">after_arr_t = <span class="number">0xc00008c000</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="四-拓展：三个索引的切片"><a href="#四-拓展：三个索引的切片" class="headerlink" title="四  拓展：三个索引的切片"></a>四  拓展：三个索引的切片</h3><ol><li><p>第三个索引可以限定容量。对于slice[i:j:k]，长度=j-i，容量=k-i</p></li><li><p>在创建切片时设置切片的容量和长度一样，可以强制让新切片的第一个append操作创建新的底层数组，与原有的底层数组分类。保持数组的简洁，更加的安全。</p><ul><li>a. 若不限定分片的容量，直接append的话可能会覆盖底层数组，从而影响到其他切片，出现奇怪的bug</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">b := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">c := b[: <span class="number">2</span>]</span><br><span class="line">c = <span class="built_in">append</span>(c, <span class="number">7</span>)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line"><span class="comment">//b切片被c影响</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">7</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">7</span>]</span><br></pre></td></tr></table></figure><ul><li>b. 在使用切片时限定容量可以避免上述情况</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">b := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">c := b[: <span class="number">2</span>:<span class="number">2</span>]</span><br><span class="line">c = <span class="built_in">append</span>(c, <span class="number">7</span>)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------</span><br><span class="line"><span class="comment">//在使用切片时限定容量，c切片append时开辟了新的数组，不影响原数组上的切片</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">7</span>]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Slice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础语法总结</title>
      <link href="/2019/03/01/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/01/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言基础语法总结"><a href="#Go语言基础语法总结" class="headerlink" title="Go语言基础语法总结"></a>Go语言基础语法总结</h1><h4 id="一-变量"><a href="#一-变量" class="headerlink" title="一   变量"></a>一   变量</h4><ol><li><p>变量定义</p><ul><li><p>1.1 使用var关键字</p><ul><li>var a bool</li><li>var a bool = true       </li></ul></li><li><p>1.2  不指定类型直接初始化让编译器选择 <code>var a = &quot;abc&quot;</code></p></li><li><p>1.3 使用 “  :=  “定义变量，可省略var关键字，如 a:=”abc”</p></li></ul><ol start="2"><li>notes:</li></ol><ul><li>变量赋值只能在函数内使用，故第三种方式只能在函数内使用</li><li>可使用var()同时定义多个变量</li><li>Go的类型在变量名之后</li></ul></li></ol><h4 id="二-内置基本类型"><a href="#二-内置基本类型" class="headerlink" title="二  内置基本类型"></a>二  内置基本类型</h4><ol><li>基本类型：<ul><li>bool</li><li>数字类型：int, uint, uintptr, float32, float64, complex64, complex128, <strong>rune</strong>（相当于char）</li></ul></li><li>类型转换：Go不会自动转换类型，当类型不同时需要手动进行强制类型转换</li></ol><h4 id="三-常量"><a href="#三-常量" class="headerlink" title="三  常量"></a>三  常量</h4><ol><li>定义：<strong>const</strong> ，常量名无需大写，Go中大写表示<strong>public</strong> ，例：const a = “acb”</li><li>const + 数值，例如<em>const a = 0</em> ，a可以与int、float类型的数据直接运算而无需强制类型转换</li><li>枚举类型：（目前使用的不多，之后再补充）<ul><li>普通枚举类型</li><li>自增值枚举类型</li></ul></li></ol><h4 id="四-条件语句"><a href="#四-条件语句" class="headerlink" title="四  条件语句"></a>四  条件语句</h4><ol><li>switch<ul><li>不需要break</li><li>使用<strong>fallthrough</strong>关键字会无条件执行下一条语句</li><li>switch后可以没有语句或跟多个语句</li></ul></li><li>if<ul><li>条件语句不需要括号</li><li>可以在条件语句中定义变量并赋值，不同语句间用；隔开</li><li>在条件语句中定义的变量作用域只在if语句中</li></ul></li></ol><h4 id="五-循环语句"><a href="#五-循环语句" class="headerlink" title="五  循环语句"></a>五  循环语句</h4><ol><li><p>for</p><ul><li>不加条件 -&gt; 死循环</li><li>不加初始条件 -&gt; 相当于while循环  （故Go中没有while循环）</li></ul></li><li><p>for经常配合<strong>range</strong>使用</p></li></ol><h4 id="六-函数"><a href="#六-函数" class="headerlink" title="六 函数"></a>六 函数</h4><ol><li>定义： func  func_name(parm )  return_type{}</li><li>Go中函数可返回多个值，并可以对多个值进行命名。实际应用中一般返回一个值和一个提示信息（fmt.Error())</li><li>默认为值传递</li><li>可变参数列表：在类型前使用” …“ 表示可变参数列表，如（…int)</li><li>高级应用：<ul><li>函数作为值：函数定义后作为值使用</li><li>闭包：匿名函数，在动态编程中使用</li></ul></li></ol><h4 id="七-指针"><a href="#七-指针" class="headerlink" title="七 指针"></a>七 指针</h4><ol><li>Go中的指针较C的指针更为简单，指针不能进行运算</li></ol><h4 id="八-内置容器"><a href="#八-内置容器" class="headerlink" title="八  内置容器"></a>八  内置容器</h4><ol><li><p>数组</p><ul><li>数组是值类型，传参会拷贝数组</li><li>若需要改变数组的值，则参数需为数组的指针</li></ul></li><li><p>切片（<em>slice</em>）</p><ul><li>slice是数组的抽象，指向原数组的地址，改变slice中的值会改变数组的值，函数传参使用slice可以避免使用数组指针</li><li>len与capacity: len是数组的长度；capacity是数组的容量</li><li>索引不可以超过len;</li><li>每次cap改变的时候指向array内存的指针都在变化。当在使用 <em>append</em> 的时候，如果 <em>cap==len</em> 了这个时候就会<a href="https://www.baidu.com/s?wd=%E6%96%B0%E5%BC%80&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">新开</a>辟一块更大内存，然后把之前的数据复制过去。</li></ul></li><li><p>Map</p><ul><li>接收时可以接收第二个参数判断<strong>key</strong>是否存在</li><li>除了<strong>slice, map, func</strong>外所有自建类型都可以作为key</li><li><strong>struct</strong>不包含上诉类型也可以作为key</li></ul></li><li><p>字符串</p><p>​    a. <strong>len()函数返回的是字节数，Go中采用的是UTF-8编码，字节数与字符数不一定相等</strong></p><p>​    b. 字符串可以通过索引读取，例如str[3]、str[2:]等，但是<strong>不能修改值或越界</strong></p><p>​    c. 对于UTF8编码后文本的处理和原始的字节处理逻辑是一样的，例如判断前后缀可以直接用字节而无需解码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断前缀</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HasPrefix</span><span class="params">(s, prefix <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s)&gt;=<span class="built_in">len</span>(prefix)&amp;&amp;s[:<span class="built_in">len</span>(prefix)]==prefix</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否为子串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contain</span><span class="params">(s, substr <span class="keyword">string</span>)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(s); i++&#123;</span><br><span class="line">        <span class="keyword">if</span> HasPrefix(s[i:], substr)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><p>​    d. 不以字节，而以字符为单位处理字符串：</p><p>​        1) 使用UTF8解码器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); &#123;</span><br><span class="line">   <span class="comment">// 每一次调用DecodeRuneInString函数都返回一个r和长度，</span></span><br><span class="line">   <span class="comment">// r对应字符本身，长度对应r采用UTF8编码后的编码字节数目。</span></span><br><span class="line">r, size := utf8.DecodeRuneInString(s[i:])</span><br><span class="line">fmt.Printf(<span class="string">"%d\t%c\n"</span>, i, r)</span><br><span class="line">    <span class="comment">//当不为ASCII时步长不为1</span></span><br><span class="line">i += size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   ​        2）使用<strong>range</strong>，Go中range会自动隐式解码</p><p>   ​    e. 一些常用的包:</p><blockquote><p>​    标准库中有四个包对字符串处理尤为重要：bytes、strings、strconv和unicode包。strings包</p><p>提供了许多如字符串的查询、替换、比较、截断、拆分和合并等功能。<br>    bytes包也提供了很多类似功能的函数，但是针对和字符串有着相同结构的[]byte类型。因为字<br>符串是只读的，因此逐步构建字符串会导致很多分配和复制。在这种情况下，使用<br>bytes.Buffer类型将会更有效。<br>    strconv包提供了布尔型、整型数、浮点数和对应字符串的相互转换，还提供了双引号转义相<br>关的转换。</p><p>​    unicode包提供了IsDigit、IsLetter、IsUpper和IsLower等类似功能，它们用于给字符分类。每<br>个函数有一个单一的rune类型的参数，然后返回一个布尔值。而像ToUpper和ToLower之类的<br>转换函数将用于rune字符的大小写转换。所有的这些函数都是遵循Unicode标准定义的字母、<br>数字等分类规范。strings包也有类似的函数，它们是ToUpper和ToLower，将原始字符串的每<br>个字符都做相应的转换，然后返回新的字符串。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常</title>
      <link href="/2019/02/24/Java%E5%BC%82%E5%B8%B8/"/>
      <url>/2019/02/24/Java%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java异常"><a href="#Java异常" class="headerlink" title="Java异常"></a>Java异常</h1><hr><p>//搬运一篇自己很久之前写的充下场面</p><p>PS: 这里的MD语法好像有点不一样…显示有点奇怪，以后再调整了</p><h3 id="1-什么是异常"><a href="#1-什么是异常" class="headerlink" title="1. 什么是异常"></a>1. 什么是异常</h3><blockquote><p>在Java中，异常是一种对象，表示阻止正常运行的程序执行的错误或者情况。</p></blockquote><pre><code>更通俗来说就是经常让我们程序崩溃的东西，比如刚刚我的代码就挂了 </code></pre><p>​                        <img src="/2019/02/24/Java异常/error.png" title="出错代码"></p><ul><li>异常都有有哪些类型，都一定会弄死我的小可爱么</li><li>我该怎么抢救一下 小可爱</li></ul><hr><h3 id="2-异常的分类"><a href="#2-异常的分类" class="headerlink" title="2. 异常的分类"></a>2. 异常的分类</h3><ol><li><p>Throwable类是所有异常类的父类，所有的异常都是它的后代。<del>（Throwable：我 ，是你爸爸，或者爷爷）</del></p></li><li><p>Error类：system error，描述的是系统内部错误，比如虚拟机炸了啊（VirtualMachineError）什么的。</p><p><em>死亡率：百分之百</em>   </p></li><li><p>Exception类：由程序和外部环境引起的错误，可以被<strong>程序捕获和处理</strong>。也就是说，这种异常！可以抢救一下！<br>小可爱：我觉得我还可以抢救一下  </p></li></ol><hr><h3 id="3-论叔侄之间的亲密关系"><a href="#3-论叔侄之间的亲密关系" class="headerlink" title="3. 论叔侄之间的亲密关系"></a>3. 论叔侄之间的亲密关系</h3><pre><code>上回说到，**Error** 和**Exception** 是一对亲兄弟，都有着好几个儿子。其中**Exception** 的儿子**RuntimeException**</code></pre><p>就格外喜欢他的叔叔Error，天天想着溜到他们家，就是这个样子</p><img src="/2019/02/24/Java异常/shushu.png" title="族谱"><pre><code>上天也被他们之间的 ~~爱情~~  感动到了，于是为了让他们~~近亲结婚~~ ，免去了婚检，从此**Error** 和**RuntimeRxception ** 被划分为**免检异常** ，其他异常为**必检异常** 。 这种关系是不正常的，所以**免检异常是在程序中必须纠正的逻辑错误** 。</code></pre><p>PS：前面我发的那个截图就属于免检异常。</p><blockquote><ul><li><p>免检异常：Java语言不强制要求编写代码捕获或声明免检异常。可能在程序的任何一个地方出现。</p></li><li><p>必检异常：编译器强行要求程序员检查并通过try-catch语句处理，或者在方法头进行声明。</p></li></ul></blockquote><hr><h3 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4. 异常处理"></a>4. 异常处理</h3><pre><code>假如我们在工作中遇到问题该怎么处理？一般来说有两种情况，第一种就是自己觉得能解决就自己处理了，当自己解决不了，那就上报给上级找个大腿来解决。对Java来说同样是如此。</code></pre><ol><li><p>声明异常</p><p> 当一个方法可能会抛出<strong>必检异常</strong>，则必须在方法中头中声明。<strong>throws</strong>后面可跟多个异常。如下所示：</p><pre><code>`public void method() throws IOException `    *何时需要声明异常？****当方法中需要抛出异常或者说该方法调用的子方法有抛出异常，但是没有对该异常进行捕获处理***</code></pre><ol start="2"><li><p>抛出异常</p><p> a. 检测到错误的程序可以创建一个合适的异常类型示例并抛出它。示例：</p><pre><code>`IOException ex = new IOException();``throw ex;`  或者是：`throw new IOException();`  **注意声明异常和抛出异常关键字的区别 **  </code></pre><p> b. 抛出链式异常，同原始异常一起抛出一个新异常（带有附加信息），称为链式异常。 </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    p1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(ex);<span class="comment">//在捕获到异常后，带着这个异常抛出一个新异常</span></span><br><span class="line">      <span class="comment">//若输出异常信息，会先显示该方法抛出的异常，再显示p1产生的异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​            </p><pre><code>3. 捕获异常    在使用中，将可能产生异常的语句放到try里面，若产生异常则会跳过剩下的语句，执行相应的catch部分的语句。**注意：**捕获多个异常时，若父类的catch块在子类之前，则会导致编译错误。如下面，若ex1是ex2的父类则会出错。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    statements;<span class="comment">//可能产生异常的语句放入try里面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception1 ex1)&#123;</span><br><span class="line">    handle <span class="keyword">for</span> ex1;<span class="comment">//对第一个异常进行处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception2 ex2)&#123;</span><br><span class="line">    handle <span class="keyword">for</span> ex2;<span class="comment">//对第二个异常进行处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>“上级”（调用者）对必检异常的处理：</p><p> 若方法中声明了一个必检异常，则调用者必须在<strong>try-catch</strong>语句中执行，或者在调用者方法头中声明异常（即再把异常交给它的上级）。例如：若p2()可能会抛出一个必检异常（以IOException为例），方法p1()调用p2，则应该如下处理：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//捕获p2 的异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        p2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(IOException ex)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抛出p2的异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p1</span><span class="params">()</span> <span class="keyword">throws</span> <span class="title">IOException</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p2();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="5-finally语句"><a href="#5-finally语句" class="headerlink" title="5. finally语句"></a>5. finally语句</h3><pre><code>若希望无论是否出现异常，都执行某些代码，则使用finally。（例如各种连接的关闭）</code></pre><blockquote><ol><li><p>使用finally时可以省略catch块</p></li><li><p>即使在到达finally前有return语句，依旧会执行finally的代码</p></li></ol></blockquote><hr><h3 id="6-一些注意事项"><a href="#6-一些注意事项" class="headerlink" title="6. 一些注意事项"></a>6. 一些注意事项</h3><pre><code>1. 捕获异常时，尽量不要捕获通用异常，如`catch(Exception e)`,应该捕获特定异常。否则可能会捕获到意想不到的异常，而且也会令他人不易理解自己的代码。   2. 对于捕获到的异常不要忽略      3. 记住“Throw early catch late”(早点抛出异常延迟抓取异常)原则，这个原则就是说，应该在异常出现时就将其抛出，抓取应该在能够获取足够信息的时候。简单来说，底层的方法应该更多的抛出异常，异常应该更多的在顶层代码中抓取处理。         4. 异常处理会花费较大的时间和资源，*不要用异常处理来做简单的逻辑测试*。如非必要，勿用异常</code></pre><hr><h3 id="7-复习题"><a href="#7-复习题" class="headerlink" title="7. 复习题"></a>7. 复习题</h3><pre><code>1. throw、throws区别   2. 必检异常和免检异常区别      3. NoClassDefFoundError 和 ClassNoFoundException区别</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/24/hello-world/"/>
      <url>/2019/02/24/hello-world/</url>
      
        <content type="html"><![CDATA[<ol><li>Front-matter</li></ol><ol><li><p>文章的Front-matter，：后面必须加一个空格，不然会报错</p></li><li><p>常用参数:</p><p>tags: Go<br>categories: Go<br>description: Go</p></li></ol><hr><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
