<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java异常</title>
      <link href="/2019/02/24/Java%E5%BC%82%E5%B8%B8/"/>
      <url>/2019/02/24/Java%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java异常"><a href="#Java异常" class="headerlink" title="Java异常"></a>Java异常</h1><hr><p>//搬运一篇自己很久之前写的充下场面</p><p>PS: 这里的MD语法好像有点不一样…显示有点奇怪，以后再调整了</p><p>&lt;!−− more −−&gt;</p><h3 id="1-什么是异常"><a href="#1-什么是异常" class="headerlink" title="1. 什么是异常"></a>1. 什么是异常</h3><blockquote><p>在Java中，异常是一种对象，表示阻止正常运行的程序执行的错误或者情况。</p></blockquote><pre><code>更通俗来说就是经常让我们程序崩溃的东西，比如刚刚我的代码就挂了 </code></pre><p>​                        <img src="/2019/02/24/Java异常/error.png" title="出错代码"></p><ul><li>异常都有有哪些类型，都一定会弄死我的小可爱么</li><li>我该怎么抢救一下 小可爱</li></ul><hr><h3 id="2-异常的分类"><a href="#2-异常的分类" class="headerlink" title="2. 异常的分类"></a>2. 异常的分类</h3><ol><li><p>Throwable类是所有异常类的父类，所有的异常都是它的后代。<del>（Throwable：我 ，是你爸爸，或者爷爷）</del></p></li><li><p>Error类：system error，描述的是系统内部错误，比如虚拟机炸了啊（VirtualMachineError）什么的。</p><p><em>死亡率：百分之百</em>   </p></li><li><p>Exception类：由程序和外部环境引起的错误，可以被<strong>程序捕获和处理</strong>。也就是说，这种异常！可以抢救一下！<br>小可爱：我觉得我还可以抢救一下  </p></li></ol><pre><code>{% asset_img shushu.png  族谱%}</code></pre><hr><h3 id="3-论叔侄之间的亲密关系"><a href="#3-论叔侄之间的亲密关系" class="headerlink" title="3. 论叔侄之间的亲密关系"></a>3. 论叔侄之间的亲密关系</h3><pre><code>上回说到，**Error** 和**Exception** 是一对亲兄弟，都有着好几个儿子。其中**Exception** 的儿子**RuntimeException**</code></pre><p>就格外喜欢他的叔叔Error，天天想着溜到他们家，就是这个样子</p><img src="/2019/02/24/Java异常/shushu.png"><pre><code>上天也被他们之间的 ~~爱情~~  感动到了，于是为了让他们~~近亲结婚~~ ，免去了婚检，从此**Error** 和**RuntimeRxception ** 被划分为**免检异常** ，其他异常为**必检异常** 。 这种关系是不正常的，所以**免检异常是在程序中必须纠正的逻辑错误** 。</code></pre><p>PS：前面我发的那个截图就属于免检异常。</p><blockquote><ul><li><p>免检异常：Java语言不强制要求编写代码捕获或声明免检异常。可能在程序的任何一个地方出现。</p></li><li><p>必检异常：编译器强行要求程序员检查并通过try-catch语句处理，或者在方法头进行声明。</p></li></ul></blockquote><hr><h3 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4. 异常处理"></a>4. 异常处理</h3><pre><code>假如我们在工作中遇到问题该怎么处理？一般来说有两种情况，第一种就是自己觉得能解决就自己处理了，当自己解决不了，那就上报给上级找个大腿来解决。对Java来说同样是如此。</code></pre><ol><li><p>声明异常</p><p> 当一个方法可能会抛出<strong>必检异常</strong>，则必须在方法中头中声明。<strong>throws</strong>后面可跟多个异常。如下所示：</p><pre><code>`public void method() throws IOException `    *何时需要声明异常？****当方法中需要抛出异常或者说该方法调用的子方法有抛出异常，但是没有对该异常进行捕获处理***</code></pre><ol start="2"><li><p>抛出异常</p><p> a. 检测到错误的程序可以创建一个合适的异常类型示例并抛出它。示例：</p><pre><code>`IOException ex = new IOException();``throw ex;`  或者是：`throw new IOException();`  **注意声明异常和抛出异常关键字的区别 **  </code></pre><p> b. 抛出链式异常，同原始异常一起抛出一个新异常（带有附加信息），称为链式异常。 </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    p1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(ex);<span class="comment">//在捕获到异常后，带着这个异常抛出一个新异常</span></span><br><span class="line">      <span class="comment">//若输出异常信息，会先显示该方法抛出的异常，再显示p1产生的异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​            </p><pre><code>3. 捕获异常    在使用中，将可能产生异常的语句放到try里面，若产生异常则会跳过剩下的语句，执行相应的catch部分的语句。**注意：**捕获多个异常时，若父类的catch块在子类之前，则会导致编译错误。如下面，若ex1是ex2的父类则会出错。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    statements;<span class="comment">//可能产生异常的语句放入try里面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception1 ex1)&#123;</span><br><span class="line">    handle <span class="keyword">for</span> ex1;<span class="comment">//对第一个异常进行处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception2 ex2)&#123;</span><br><span class="line">    handle <span class="keyword">for</span> ex2;<span class="comment">//对第二个异常进行处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>“上级”（调用者）对必检异常的处理：</p><p> 若方法中声明了一个必检异常，则调用者必须在<strong>try-catch</strong>语句中执行，或者在调用者方法头中声明异常（即再把异常交给它的上级）。例如：若p2()可能会抛出一个必检异常（以IOException为例），方法p1()调用p2，则应该如下处理：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//捕获p2 的异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        p2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(IOException ex)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抛出p2的异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p1</span><span class="params">()</span> <span class="keyword">throws</span> <span class="title">IOException</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p2();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="5-finally语句"><a href="#5-finally语句" class="headerlink" title="5. finally语句"></a>5. finally语句</h3><pre><code>若希望无论是否出现异常，都执行某些代码，则使用finally。（例如各种连接的关闭）</code></pre><blockquote><ol><li><p>使用finally时可以省略catch块</p></li><li><p>即使在到达finally前有return语句，依旧会执行finally的代码</p></li></ol></blockquote><hr><h3 id="6-一些注意事项"><a href="#6-一些注意事项" class="headerlink" title="6. 一些注意事项"></a>6. 一些注意事项</h3><pre><code>1. 捕获异常时，尽量不要捕获通用异常，如`catch(Exception e)`,应该捕获特定异常。否则可能会捕获到意想不到的异常，而且也会令他人不易理解自己的代码。2. 对于捕获到的异常不要忽略3. 记住“Throw early catch late”(早点抛出异常延迟抓取异常)原则，这个原则就是说，应该在异常出现时就将其抛出，抓取应该在能够获取足够信息的时候。简单来说，底层的方法应该更多的抛出异常，异常应该更多的在顶层代码中抓取处理。4. 异常处理会花费较大的时间和资源，*不要用异常处理来做简单的逻辑测试*。如非必要，勿用异常</code></pre><hr><h3 id="7-复习题"><a href="#7-复习题" class="headerlink" title="7. 复习题"></a>7. 复习题</h3><pre><code>1. throw、throws区别2. 必检异常和免检异常区别3. NoClassDefFoundError 和 ClassNoFoundException区别</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tags&amp;&amp;categories</title>
      <link href="/2019/02/24/tags-categories/"/>
      <url>/2019/02/24/tags-categories/</url>
      
        <content type="html"><![CDATA[<p>hhhhhh</p>]]></content>
      
      
      <categories>
          
          <category> categories_test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first acticle</title>
      <link href="/2019/02/24/my-first-acticle/"/>
      <url>/2019/02/24/my-first-acticle/</url>
      
        <content type="html"><![CDATA[<h3 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h3><p>哈哈哈哈哈哈哈哈哈</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/24/hello-world/"/>
      <url>/2019/02/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
