<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Slice详解</title>
      <link href="/2019/03/04/Slice%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/03/04/Slice%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Slice常见操作及底层原理实现"><a href="#Slice常见操作及底层原理实现" class="headerlink" title="Slice常见操作及底层原理实现"></a>Slice常见操作及底层原理实现</h2><h3 id="一-什么是Slice"><a href="#一-什么是Slice" class="headerlink" title="一 什么是Slice"></a>一 什么是Slice</h3><ol><li>slice（切片）是一种数组结构，相当于是一个动态的数组，可以按需自动增长和缩小。</li><li>那么为什么需要slice呢？<ul><li>在GO语言中，数组是一个值，在进行传参和赋值操作时，都会将数组拷贝一份，当数组较大时耗费较多资源；使用数组的指针会较为麻烦</li><li>slice是引用类型，传参时不需要再用到指针；slice本质上是数组的指针，所以传参时不需要拷贝数组，耗费较小；可以动态改变数组大小，使用更加的方便</li></ul></li></ol><h3 id="二-Slice的常用操作"><a href="#二-Slice的常用操作" class="headerlink" title="二 Slice的常用操作"></a>二 Slice的常用操作</h3><ol><li><p>slice的创建</p><ul><li><p>a. 使用内置的make函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只指定长度，则默认容量和长度相等</span></span><br><span class="line"><span class="comment">//容量的定义在后面解释</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">//指定长度和容量，容量不能小于长度</span></span><br><span class="line">slice = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>b. 使用切片字面量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其长度和容量都是3</span></span><br><span class="line">s1 := []<span class="keyword">string</span>&#123;<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"bear"</span>&#125;</span><br><span class="line"><span class="comment">//使用索引声明切片</span></span><br><span class="line"><span class="comment">//下面创建了一个长度为100的切片</span></span><br><span class="line">s2 := []<span class="keyword">int</span>&#123;<span class="number">99</span>: <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>c. nil和空切片</p><ul><li><p>声明时不做任何初始化就会创建一个nil切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span></span><br><span class="line"><span class="comment">//new 产生的是指针，需要用* </span></span><br><span class="line">slice := *<span class="built_in">new</span>([]<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure></li><li><p>声明空切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用make</span></span><br><span class="line">s1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">//使用切片字面量</span></span><br><span class="line">s2 := []<span class="keyword">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>空切片与nil切片的区别:</p><ul><li><strong>nil切片=nil, 而空切片！=nil，在使用切片进行逻辑运算时尽量不要使用空切片</strong></li><li>空切片指针指向一个特殊的<strong>zerobase</strong>地址，而nil为0</li><li>在JSON序列化有区别：nill切片为{“values”:null}, 而空切片为{“value” []}</li></ul></li></ul></li></ul></li><li><p>增加元素</p><ul><li>使用内置函数append添加元素</li></ul></li><li><p>复制切片</p><ul><li>使用copy</li></ul></li><li><p>删除元素，内置没有提供，下面简单实现一下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteSlice</span><span class="params">(index <span class="keyword">int</span>, s []<span class="keyword">int</span>)</span> []<span class="title">int</span></span>&#123;</span><br><span class="line">s1 := s[:index]</span><br><span class="line">s1 = <span class="built_in">append</span>(s1, s[index+<span class="number">1</span>:]...)</span><br><span class="line"><span class="keyword">return</span> s1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-slice底层实现"><a href="#三-slice底层实现" class="headerlink" title="三 slice底层实现"></a>三 slice底层实现</h3><ol><li><p>切片是基于数组实现的，是数组的抽象，因此底层的内存是连续的，效率较高，效率非常高，还可以通过索引获得数据，可以迭代以及垃圾回收优化的好处。切片对象本身的很小，是因为它是只有3个字段的数据结构：一个是指向底层数组的指针，一个是切片的长度，一个是切片的容量。这3个字段，就是Go语言操作底层数组的元数据。查看其源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> notInHeapSlice <span class="keyword">struct</span> &#123;</span><br><span class="line">array *notInHeap<span class="comment">//底层数组的指针</span></span><br><span class="line"><span class="built_in">len</span>   <span class="keyword">int</span>   <span class="comment">//切片的长度</span></span><br><span class="line"><span class="built_in">cap</span>   <span class="keyword">int</span>   <span class="comment">//切片的容量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/03/04/Slice详解/slice底层结构.png" title="slice底层结构"></li><li><p>关于容量与长度：</p><ul><li><p>a. 长度：slice当前元素个数</p><p>​    容量：底层数组的空间，当容量不足时会开辟新的数组空间，避免频繁开辟内存空间</p></li><li><p>b. 计算：对于底层数组容量是k的切片slice[i,j]来说</p><ul><li>长度：j-i</li><li>容量：k-i</li></ul></li><li><p>c. 数组索引不能超过长度</p></li></ul></li></ol><ol start="3"><li><p><strong>切片增长会改变长度，容量不一定，需要看可用容量，当容量不足时会分配一个新的底层数组，将现有的值复制到新数组再添加新的值。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">t := <span class="built_in">append</span>(s, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"before_arr_s = %p\n"</span>, s)</span><br><span class="line">fmt.Println(t)</span><br><span class="line">fmt.Printf(<span class="string">"before_arr_t = %p\n"</span>, t)</span><br><span class="line"></span><br><span class="line">t = <span class="built_in">append</span>(t, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">fmt.Printf(<span class="string">"after_arr_s = %p\n"</span>, s)</span><br><span class="line">fmt.Println(t)</span><br><span class="line">fmt.Printf(<span class="string">"after_arr_t = %p\n"</span>, t)</span><br><span class="line"></span><br><span class="line">--------------------------</span><br><span class="line">[]</span><br><span class="line">before_arr_s = <span class="number">0xc000078030</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">before_arr_t = <span class="number">0xc000078030</span></span><br><span class="line">[]</span><br><span class="line">after_arr_s = <span class="number">0xc000078030</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"><span class="comment">//当第二次添加元素时超过了容量限制，于是重新开辟了数组，查看地址发现的确发生了改变</span></span><br><span class="line">after_arr_t = <span class="number">0xc00008c000</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="四-拓展：三个索引的切片"><a href="#四-拓展：三个索引的切片" class="headerlink" title="四  拓展：三个索引的切片"></a>四  拓展：三个索引的切片</h3><ol><li><p>第三个索引可以限定容量。对于slice[i:j:k]，长度=j-i，容量=k-i</p></li><li><p>在创建切片时设置切片的容量和长度一样，可以强制让新切片的第一个append操作创建新的底层数组，与原有的底层数组分类。保持数组的简洁，更加的安全。</p><ul><li>a. 若不限定分片的容量，直接append的话可能会覆盖底层数组，从而影响到其他切片，出现奇怪的bug</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">b := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">c := b[: <span class="number">2</span>]</span><br><span class="line">c = <span class="built_in">append</span>(c, <span class="number">7</span>)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line"><span class="comment">//b切片被c影响</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">7</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">7</span>]</span><br></pre></td></tr></table></figure><ul><li>b. 在使用切片时限定容量可以避免上述情况</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">b := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">c := b[: <span class="number">2</span>:<span class="number">2</span>]</span><br><span class="line">c = <span class="built_in">append</span>(c, <span class="number">7</span>)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------</span><br><span class="line"><span class="comment">//在使用切片时限定容量，c切片append时开辟了新的数组，不影响原数组上的切片</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">7</span>]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Slice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础语法总结</title>
      <link href="/2019/03/01/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/01/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言基础语法总结"><a href="#Go语言基础语法总结" class="headerlink" title="Go语言基础语法总结"></a>Go语言基础语法总结</h1><h4 id="一-变量"><a href="#一-变量" class="headerlink" title="一   变量"></a>一   变量</h4><ol><li><p>变量定义</p><ul><li><p>1.1 使用var关键字</p><ul><li>var a bool</li><li>var a bool = true       </li></ul></li><li><p>1.2  不指定类型直接初始化让编译器选择 <code>var a = &quot;abc&quot;</code></p></li><li><p>1.3 使用 “  :=  “定义变量，可省略var关键字，如 a:=”abc”</p></li></ul><ol start="2"><li>notes:</li></ol><ul><li>变量赋值只能在函数内使用，故第三种方式只能在函数内使用</li><li>可使用var()同时定义多个变量</li><li>Go的类型在变量名之后</li></ul></li></ol><h4 id="二-内置基本类型"><a href="#二-内置基本类型" class="headerlink" title="二  内置基本类型"></a>二  内置基本类型</h4><ol><li>基本类型：<ul><li>bool</li><li>数字类型：int, uint, uintptr, float32, float64, complex64, complex128, <strong>rune</strong>（相当于char）</li></ul></li><li>类型转换：Go不会自动转换类型，当类型不同时需要手动进行强制类型转换</li></ol><h4 id="三-常量"><a href="#三-常量" class="headerlink" title="三  常量"></a>三  常量</h4><ol><li>定义：<strong>const</strong> ，常量名无需大写，Go中大写表示<strong>public</strong> ，例：const a = “acb”</li><li>const + 数值，例如<em>const a = 0</em> ，a可以与int、float类型的数据直接运算而无需强制类型转换</li><li>枚举类型：（目前使用的不多，之后再补充）<ul><li>普通枚举类型</li><li>自增值枚举类型</li></ul></li></ol><h4 id="四-条件语句"><a href="#四-条件语句" class="headerlink" title="四  条件语句"></a>四  条件语句</h4><ol><li>switch<ul><li>不需要break</li><li>使用<strong>fallthrough</strong>关键字会无条件执行下一条语句</li><li>switch后可以没有语句或跟多个语句</li></ul></li><li>if<ul><li>条件语句不需要括号</li><li>可以在条件语句中定义变量并赋值，不同语句间用；隔开</li><li>在条件语句中定义的变量作用域只在if语句中</li></ul></li></ol><h4 id="五-循环语句"><a href="#五-循环语句" class="headerlink" title="五  循环语句"></a>五  循环语句</h4><ol><li><p>for</p><ul><li>不加条件 -&gt; 死循环</li><li>不加初始条件 -&gt; 相当于while循环  （故Go中没有while循环）</li></ul></li><li><p>for经常配合<strong>range</strong>使用</p></li></ol><h4 id="六-函数"><a href="#六-函数" class="headerlink" title="六 函数"></a>六 函数</h4><ol><li>定义： func  func_name(parm )  return_type{}</li><li>Go中函数可返回多个值，并可以对多个值进行命名。实际应用中一般返回一个值和一个提示信息（fmt.Error())</li><li>默认为值传递</li><li>可变参数列表：在类型前使用” …“ 表示可变参数列表，如（…int)</li><li>高级应用：<ul><li>函数作为值：函数定义后作为值使用</li><li>闭包：匿名函数，在动态编程中使用</li></ul></li></ol><h4 id="七-指针"><a href="#七-指针" class="headerlink" title="七 指针"></a>七 指针</h4><ol><li>Go中的指针较C的指针更为简单，指针不能进行运算</li></ol><h4 id="八-内置容器"><a href="#八-内置容器" class="headerlink" title="八  内置容器"></a>八  内置容器</h4><ol><li>数组<ul><li>数组是值类型，传参会拷贝数组</li><li>若需要改变数组的值，则参数需为数组的指针</li></ul></li><li>切片（<em>slice</em>）<ul><li>slice是数组的抽象，指向原数组的地址，改变slice中的值会改变数组的值，函数传参使用slice可以避免使用数组指针</li><li>len与capacity: len是数组的长度；capacity是数组的容量</li><li>索引不可以超过len;</li><li>每次cap改变的时候指向array内存的指针都在变化。当在使用 <em>append</em> 的时候，如果 <em>cap==len</em> 了这个时候就会<a href="https://www.baidu.com/s?wd=%E6%96%B0%E5%BC%80&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">新开</a>辟一块更大内存，然后把之前的数据复制过去。</li></ul></li><li>Map<ul><li>接收时可以接收第二个参数判断<strong>key</strong>是否存在</li><li>除了<strong>slice, map, func</strong>外所有自建类型都可以作为key</li><li><strong>struct</strong>不包含上诉类型也可以作为key</li></ul></li><li>字符串（待补充）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常</title>
      <link href="/2019/02/24/Java%E5%BC%82%E5%B8%B8/"/>
      <url>/2019/02/24/Java%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java异常"><a href="#Java异常" class="headerlink" title="Java异常"></a>Java异常</h1><hr><p>//搬运一篇自己很久之前写的充下场面</p><p>PS: 这里的MD语法好像有点不一样…显示有点奇怪，以后再调整了</p><h3 id="1-什么是异常"><a href="#1-什么是异常" class="headerlink" title="1. 什么是异常"></a>1. 什么是异常</h3><blockquote><p>在Java中，异常是一种对象，表示阻止正常运行的程序执行的错误或者情况。</p></blockquote><pre><code>更通俗来说就是经常让我们程序崩溃的东西，比如刚刚我的代码就挂了 </code></pre><p>​                        <img src="/2019/02/24/Java异常/error.png" title="出错代码"></p><ul><li>异常都有有哪些类型，都一定会弄死我的小可爱么</li><li>我该怎么抢救一下 小可爱</li></ul><hr><h3 id="2-异常的分类"><a href="#2-异常的分类" class="headerlink" title="2. 异常的分类"></a>2. 异常的分类</h3><ol><li><p>Throwable类是所有异常类的父类，所有的异常都是它的后代。<del>（Throwable：我 ，是你爸爸，或者爷爷）</del></p></li><li><p>Error类：system error，描述的是系统内部错误，比如虚拟机炸了啊（VirtualMachineError）什么的。</p><p><em>死亡率：百分之百</em>   </p></li><li><p>Exception类：由程序和外部环境引起的错误，可以被<strong>程序捕获和处理</strong>。也就是说，这种异常！可以抢救一下！<br>小可爱：我觉得我还可以抢救一下  </p></li></ol><hr><h3 id="3-论叔侄之间的亲密关系"><a href="#3-论叔侄之间的亲密关系" class="headerlink" title="3. 论叔侄之间的亲密关系"></a>3. 论叔侄之间的亲密关系</h3><pre><code>上回说到，**Error** 和**Exception** 是一对亲兄弟，都有着好几个儿子。其中**Exception** 的儿子**RuntimeException**</code></pre><p>就格外喜欢他的叔叔Error，天天想着溜到他们家，就是这个样子</p><img src="/2019/02/24/Java异常/shushu.png" title="族谱"><pre><code>上天也被他们之间的 ~~爱情~~  感动到了，于是为了让他们~~近亲结婚~~ ，免去了婚检，从此**Error** 和**RuntimeRxception ** 被划分为**免检异常** ，其他异常为**必检异常** 。 这种关系是不正常的，所以**免检异常是在程序中必须纠正的逻辑错误** 。</code></pre><p>PS：前面我发的那个截图就属于免检异常。</p><blockquote><ul><li><p>免检异常：Java语言不强制要求编写代码捕获或声明免检异常。可能在程序的任何一个地方出现。</p></li><li><p>必检异常：编译器强行要求程序员检查并通过try-catch语句处理，或者在方法头进行声明。</p></li></ul></blockquote><hr><h3 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4. 异常处理"></a>4. 异常处理</h3><pre><code>假如我们在工作中遇到问题该怎么处理？一般来说有两种情况，第一种就是自己觉得能解决就自己处理了，当自己解决不了，那就上报给上级找个大腿来解决。对Java来说同样是如此。</code></pre><ol><li><p>声明异常</p><p> 当一个方法可能会抛出<strong>必检异常</strong>，则必须在方法中头中声明。<strong>throws</strong>后面可跟多个异常。如下所示：</p><pre><code>`public void method() throws IOException `    *何时需要声明异常？****当方法中需要抛出异常或者说该方法调用的子方法有抛出异常，但是没有对该异常进行捕获处理***</code></pre><ol start="2"><li><p>抛出异常</p><p> a. 检测到错误的程序可以创建一个合适的异常类型示例并抛出它。示例：</p><pre><code>`IOException ex = new IOException();``throw ex;`  或者是：`throw new IOException();`  **注意声明异常和抛出异常关键字的区别 **  </code></pre><p> b. 抛出链式异常，同原始异常一起抛出一个新异常（带有附加信息），称为链式异常。 </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    p1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(ex);<span class="comment">//在捕获到异常后，带着这个异常抛出一个新异常</span></span><br><span class="line">      <span class="comment">//若输出异常信息，会先显示该方法抛出的异常，再显示p1产生的异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​            </p><pre><code>3. 捕获异常    在使用中，将可能产生异常的语句放到try里面，若产生异常则会跳过剩下的语句，执行相应的catch部分的语句。**注意：**捕获多个异常时，若父类的catch块在子类之前，则会导致编译错误。如下面，若ex1是ex2的父类则会出错。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    statements;<span class="comment">//可能产生异常的语句放入try里面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception1 ex1)&#123;</span><br><span class="line">    handle <span class="keyword">for</span> ex1;<span class="comment">//对第一个异常进行处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception2 ex2)&#123;</span><br><span class="line">    handle <span class="keyword">for</span> ex2;<span class="comment">//对第二个异常进行处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>“上级”（调用者）对必检异常的处理：</p><p> 若方法中声明了一个必检异常，则调用者必须在<strong>try-catch</strong>语句中执行，或者在调用者方法头中声明异常（即再把异常交给它的上级）。例如：若p2()可能会抛出一个必检异常（以IOException为例），方法p1()调用p2，则应该如下处理：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//捕获p2 的异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        p2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(IOException ex)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抛出p2的异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p1</span><span class="params">()</span> <span class="keyword">throws</span> <span class="title">IOException</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p2();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="5-finally语句"><a href="#5-finally语句" class="headerlink" title="5. finally语句"></a>5. finally语句</h3><pre><code>若希望无论是否出现异常，都执行某些代码，则使用finally。（例如各种连接的关闭）</code></pre><blockquote><ol><li><p>使用finally时可以省略catch块</p></li><li><p>即使在到达finally前有return语句，依旧会执行finally的代码</p></li></ol></blockquote><hr><h3 id="6-一些注意事项"><a href="#6-一些注意事项" class="headerlink" title="6. 一些注意事项"></a>6. 一些注意事项</h3><pre><code>1. 捕获异常时，尽量不要捕获通用异常，如`catch(Exception e)`,应该捕获特定异常。否则可能会捕获到意想不到的异常，而且也会令他人不易理解自己的代码。2. 对于捕获到的异常不要忽略3. 记住“Throw early catch late”(早点抛出异常延迟抓取异常)原则，这个原则就是说，应该在异常出现时就将其抛出，抓取应该在能够获取足够信息的时候。简单来说，底层的方法应该更多的抛出异常，异常应该更多的在顶层代码中抓取处理。4. 异常处理会花费较大的时间和资源，*不要用异常处理来做简单的逻辑测试*。如非必要，勿用异常</code></pre><hr><h3 id="7-复习题"><a href="#7-复习题" class="headerlink" title="7. 复习题"></a>7. 复习题</h3><pre><code>1. throw、throws区别2. 必检异常和免检异常区别3. NoClassDefFoundError 和 ClassNoFoundException区别</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tags&amp;&amp;categories</title>
      <link href="/2019/02/24/tags-categories/"/>
      <url>/2019/02/24/tags-categories/</url>
      
        <content type="html"><![CDATA[<p>hhhhhh</p>]]></content>
      
      
      <categories>
          
          <category> categories_test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first acticle</title>
      <link href="/2019/02/24/my-first-acticle/"/>
      <url>/2019/02/24/my-first-acticle/</url>
      
        <content type="html"><![CDATA[<h3 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h3><p>哈哈哈哈哈哈哈哈哈</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/24/hello-world/"/>
      <url>/2019/02/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
